{"version":3,"file":"index.js","sources":["../../lib/regex.mjs","../../lib/strings.mjs","../../lib/index.mjs"],"sourcesContent":["\n/**\n * Convert array of strings to a regular expression\n *\tex ['ab','a'] => (?:ab|a)\n * \tex ['a','b'] => [ab]\n * @param {string[]} chars\n * @return {string}\n */\nexport const arrayToPattern = (chars) =>{\n\n\tchars = chars.filter( Boolean );\n\n\tif( chars.length < 2 ){\n\t\treturn chars[0] || '';\n\t}\n\n\treturn (maxValueLength(chars) == 1) ? '['+chars.join('')+']' : '(?:'+chars.join('|')+')';\n};\n\n/**\n * @param {string[]} array\n * @return {string}\n */\nexport const sequencePattern = (array)=>{\n\n\tif( !hasDuplicates(array) ){\n\t\treturn array.join('');\n\t}\n\n\tlet pattern = '';\n\tlet prev_char_count = 0;\n\n\tconst prev_pattern = ()=>{\n\t\tif( prev_char_count > 1 ){\n\t\t\tpattern += '{'+prev_char_count+'}';\n\t\t}\n\t}\n\n\tarray.forEach((char,i)=>{\n\n\t\tif( char === array[i-1] ){\n\t\t\tprev_char_count++;\n\t\t\treturn;\n\t\t}\n\n\t\tprev_pattern();\n\n\t\tpattern += char;\n\t\tprev_char_count = 1;\n\t});\n\n\tprev_pattern();\n\n\treturn pattern;\n\n}\n\n\n\n/**\n * Convert array of strings to a regular expression\n *\tex ['ab','a'] => (?:ab|a)\n * \tex ['a','b'] => [ab]\n * @param {Set<string>} chars\n * @return {string}\n */\nexport const setToPattern = (chars)=>{\n\tlet array = toArray(chars);\n\treturn arrayToPattern(array);\n}\n\n\n\n/**\n *\n * https://stackoverflow.com/questions/7376598/in-javascript-how-do-i-check-if-an-array-has-duplicate-values\n * @param {any[]} array\n */\nexport const hasDuplicates = (array) => {\n    return (new Set(array)).size !== array.length;\n}\n\n\n/**\n * https://stackoverflow.com/questions/63006601/why-does-u-throw-an-invalid-escape-error\n * @param {string} str\n * @return {string}\n */\nexport const escape_regex = (str) => {\n\treturn (str + '').replace(/([\\$\\(\\)\\*\\+\\.\\?\\[\\]\\^\\{\\|\\}\\\\])/gu, '\\\\$1');\n};\n\n/**\n * Return the max length of array values\n * @param {string[]} array\n *\n */\nexport const maxValueLength = (array) => {\n\treturn array.reduce( (longest, value) => Math.max(longest,unicodeLength(value)),0);\n}\n\n\n/**\n * @param {string} str\n */\nexport const unicodeLength = (str) => {\n\treturn toArray(str).length;\n}\n\n/**\n * @param {any} p\n * @return {any[]}\n */\nexport const toArray = (p) => Array.from(p);\n","\n\n\n/**\n * Get all possible combinations of substrings that add up to the given string\n * https://stackoverflow.com/questions/30169587/find-all-the-combination-of-substrings-that-add-up-to-the-given-string\n * @param {string} input\n * @return {string[][]}\n */\nexport const allSubstrings = (input) => {\n\n    if( input.length === 1) return [[input]];\n\n\t/** @type {string[][]} */\n    let result = [];\n\n\tconst start = input.substring(1);\n    const suba = allSubstrings(start);\n\n\tsuba.forEach(function(subresult) {\n        let tmp = subresult.slice(0);\n        tmp[0] = input.charAt(0) + tmp[0];\n        result.push(tmp);\n\n        tmp = subresult.slice(0);\n        tmp.unshift(input.charAt(0));\n        result.push(tmp);\n    });\n\n    return result;\n}\n","\n/**\n * @typedef {{[key:string]:string}} TUnicodeMap\n * @typedef {{[key:string]:Set<string>}} TUnicodeSets\n * @typedef {[[number,number]]} TCodePoints\n * @typedef {{folded:string,composed:string,code_point:number}} TCodePointObj\n * @typedef {{start:number,end:number,length:number,substr:string}} TSequencePart\n */\n\n\nimport { setToPattern, arrayToPattern, escape_regex, sequencePattern, toArray } from './regex.mjs';\nimport { allSubstrings } from './strings.mjs';\n\n\n/** @type {TCodePoints} */\nexport const code_points = [[ 0, 65535 ]];\n\nconst accent_pat = '[\\u0300-\\u036F\\u{b7}\\u{2be}]'; // \\u{2bc}\n\n/** @type {TUnicodeMap} */\nexport let unicode_map;\n\n/** @type {RegExp} */\nlet multi_char_reg;\n\nconst max_char_length = 3;\n\n/** @type {TUnicodeMap} */\nconst latin_convert = {\n\t'æ': 'ae',\n\t'ⱥ': 'a',\n\t'ø': 'o',\n\t'⁄': '/',\n\t'∕': '/',\n};\n\nconst convert_pat = new RegExp(Object.keys(latin_convert).join('|')+'|'+accent_pat,'gu');\n\n\n\n/**\n * Initialize the unicode_map from the give code point ranges\n *\n * @param {TCodePoints=} _code_points\n */\nexport const initialize = (_code_points) => {\n\tif( unicode_map !== undefined ) return;\n\tunicode_map = generateMap(_code_points || code_points );\n}\n\n\n/**\n * Helper method for normalize a string\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\n * @param {string} str\n * @param {string} form\n */\nexport const normalize = (str,form='NFKD') => str.normalize(form);\n\n\n/**\n * Compatibility Decomposition without reordering string\n * calling str.normalize('NFKD') on \\u{594}\\u{595}\\u{596} becomes \\u{596}\\u{594}\\u{595}\n * @param {string} str\n */\nexport const decompose = (str) =>{\n\n\tif( str.match(/[\\u0f71-\\u0f81]/) ){\n\t\treturn toArray(str).reduce(\n\t\t\t/**\n\t\t\t * @param {string} result\n\t\t\t * @param {string} char\n\t\t\t */\n\t\t\t(result, char) =>{\n\t\t\t\treturn result + normalize(char)\n\t\t\t},\n\t\t\t''\n\t\t);\n\t}\n\n\treturn normalize(str);\n}\n\n\n\n\n/**\n * Remove accents\n * via https://github.com/krisk/Fuse/issues/133#issuecomment-318692703\n * @param {string} str\n * @return {string}\n */\nexport const asciifold = (str) => {\n\treturn decompose(str)\n\t\t.toLowerCase()\n\t\t.replace(convert_pat,(/** @type {string} */ char) => {\n\t\t\treturn latin_convert[char] || '';\n\t\t});\n};\n\n\n\n\n\n\n/**\n * Generate a list of unicode variants from the list of code points\n * @param {TCodePoints} code_points\n * @yield {TCodePointObj}\n */\nexport function* generator(code_points){\n\n\tfor(const [code_point_min, code_point_max] of code_points){\n\t\tfor(let i = code_point_min; i <= code_point_max; i++){\n\n\t\t\tlet composed\t\t= String.fromCharCode(i);\n\t\t\tlet folded\t\t\t= asciifold(composed);\n\n\n\t\t\tif( folded == composed.toLowerCase() ){\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// skip when folded is a string longer than 3 characters long\n\t\t\t// bc the resulting regex patterns will be long\n\t\t\t// eg:\n\t\t\t// folded صلى الله عليه وسلم length 18 code point 65018\n\t\t\t// folded جل جلاله length 8 code point 65019\n\t\t\tif( folded.length > max_char_length ){\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif( folded.length == 0 ){\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tlet decomposed\t\t= normalize(composed);\n\t\t\tlet recomposed\t\t= normalize(decomposed,'NFC');\n\n\t\t\tif( recomposed === composed && folded === decomposed ){\n\t\t\t\tcontinue;\n\t\t\t}\n\n\n\t\t\tyield {folded:folded,composed:composed,code_point:i};\n\t\t}\n\t}\n}\n\n\n/**\n * Generate a unicode map from the list of code points\n * @param {TCodePoints} code_points\n * @return {TUnicodeSets}\n */\nexport const generateSets = (code_points) => {\n\n\t/** @type {{[key:string]:Set<string>}} */\n\tconst unicode_sets = {};\n\n\n\t/**\n\t * @param {string} folded\n\t * @param {string} to_add\n\t */\n\tconst addMatching = (folded,to_add) => {\n\n\t\t/** @type {Set<string>} */\n\t\tconst folded_set = unicode_sets[folded] || new Set();\n\n\t\tconst patt = new RegExp( '^'+setToPattern(folded_set)+'$','iu');\n\t\tif( to_add.match(patt) ){\n\t\t\treturn;\n\t\t}\n\n\t\tfolded_set.add(escape_regex(to_add));\n\t\tunicode_sets[folded] = folded_set;\n\t}\n\n\n\tfor( let value of generator(code_points) ){\n\t\taddMatching(value.folded,value.folded);\n\t\taddMatching(value.folded,value.composed);\n\t}\n\n\treturn unicode_sets;\n}\n\n/**\n * Generate a unicode map from the list of code points\n * ae => (?:(?:ae|Æ|Ǽ|Ǣ)|(?:A|Ⓐ|Ａ...)(?:E|ɛ|Ⓔ...))\n *\n * @param {TCodePoints} code_points\n * @return {TUnicodeMap}\n */\nexport const generateMap = (code_points) => {\n\n\t/** @type {TUnicodeSets} */\n\tconst unicode_sets = generateSets(code_points);\n\n\t/** @type {TUnicodeMap} */\n\tconst unicode_map = {};\n\n\t/** @type {string[]} */\n\tlet multi_char = [];\n\n\tfor( let folded in unicode_sets ){\n\n\t\tlet set = unicode_sets[folded];\n\t\tif( set ){\n\t\t\tunicode_map[folded] = setToPattern(set);\n\t\t}\n\n\t\tif( folded.length > 1 ){\n\t\t\tmulti_char.push(escape_regex(folded));\n\t\t}\n\t}\n\n\tmulti_char.sort((a, b) => b.length - a.length );\n\tconst multi_char_patt = arrayToPattern(multi_char);\n\tmulti_char_reg = new RegExp('^'+multi_char_patt,'u');\n\n\treturn unicode_map;\n}\n\n\n/**\n * Map each element of an array from it's folded value to all possible unicode matches\n * @param {string[]} strings\n * @param {number} min_replacement\n * @return {string}\n */\nexport const mapSequence = (strings,min_replacement=1) =>{\n\tlet chars_replaced = 0;\n\n\n\tstrings = strings.map((str)=>{\n\t\tif( unicode_map[str] ){\n\t\t\tchars_replaced += str.length;\n\t\t}\n\t\treturn unicode_map[str] || str;\n\t});\n\n\tif( chars_replaced >= min_replacement ){\n\t\treturn sequencePattern(strings);\n\t}\n\n\treturn '';\n}\n\n/**\n * Convert a short string and split it into all possible patterns\n * Keep a pattern only if min_replacement is met\n *\n * 'abc'\n * \t\t=> [['abc'],['ab','c'],['a','bc'],['a','b','c']]\n *\t\t=> ['abc-pattern','ab-c-pattern'...]\n *\n *\n * @param {string} str\n * @param {number} min_replacement\n * @return {string}\n */\nexport const substringsToPattern = (str,min_replacement=1) => {\n\n\tmin_replacement = Math.max(min_replacement,str.length-1);\n\n\treturn arrayToPattern(\n\t\tallSubstrings(str).map( (sub_pat) =>{\n\t\t\treturn mapSequence(sub_pat,min_replacement)\n\t\t})\n\t);\n}\n\n/**\n * Convert an array of sequences into a pattern\n * [{start:0,end:3,length:3,substr:'iii'}...] => (?:iii...)\n *\n * @param {Sequence[]} sequences\n * @param {boolean} all\n */\nconst sequencesToPattern = (sequences,all=true) => {\n\n\tlet min_replacement = sequences.length > 1 ? 1 : 0;\n\treturn arrayToPattern(\n\t\tsequences.map( (sequence) =>{\n\t\t\tlet seq = [];\n\t\t\tconst len = all ? sequence.length() : sequence.length() - 1;\n\t\t\tfor( let j = 0; j < len; j++){\n\t\t\t\tseq.push(substringsToPattern(sequence.substrs[j]||'',min_replacement));\n\t\t\t}\n\n\t\t\treturn sequencePattern(seq);\n\t\t})\n\t);\n}\n\n/**\n * Return true if the sequence is already in the sequences\n * @param {Sequence} needle_seq\n * @param {Sequence[]} sequences\n */\nconst inSequences = (needle_seq, sequences) => {\n\n\tfor(const seq of sequences){\n\n\t\tif( seq.start != needle_seq.start || seq.end != needle_seq.end ){\n\t\t\tcontinue;\n\t\t}\n\n\t\tif( seq.substrs.join('') !== needle_seq.substrs.join('') ){\n\t\t\tcontinue;\n\t\t}\n\n\n\t\tlet needle_parts\t= needle_seq.parts;\n\n\t\t/**\n\t\t * @param {TSequencePart} part\n\t\t */\n\t\tconst filter = (part) =>{\n\n\t\t\tfor(const needle_part of needle_parts){\n\n\t\t\t\tif( needle_part.start === part.start && needle_part.substr === part.substr ){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif( part.length == 1 || needle_part.length == 1 ){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\n\t\t\t\t// check for overlapping parts\n\t\t\t\t// a = ['::=','==']\n\t\t\t\t// b = ['::','===']\n\t\t\t\t// a = ['r','sm']\n\t\t\t\t// b = ['rs','m']\n\t\t\t\tif( part.start < needle_part.start && part.end > needle_part.start ){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif( needle_part.start < part.start && needle_part.end > part.start ){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\tlet filtered = seq.parts.filter(filter);\n\n\t\tif( filtered.length > 0 ){\n\t\t\tcontinue;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nclass Sequence{\n\n\tconstructor(){\n\n\t\t/** @type {TSequencePart[]} */\n\t\tthis.parts\t\t= [];\n\n\t\t/** @type {string[]} */\n\t\tthis.substrs\t= [];\n\t\tthis.start\t\t= 0;\n\t\tthis.end\t\t= 0;\n\t}\n\n\t/**\n\t * @param {TSequencePart|undefined} part\n\t */\n\tadd(part){\n\t\tif( part ){\n\t\t\tthis.parts.push(part);\n\t\t\tthis.substrs.push(part.substr);\n\t\t\tthis.start\t= Math.min(part.start,this.start);\n\t\t\tthis.end\t= Math.max(part.end,this.end);\n\t\t}\n\t}\n\n\tlast(){\n\t\treturn this.parts[this.parts.length-1];\n\t}\n\n\tlength(){\n\t\treturn this.parts.length;\n\t}\n\n\t/**\n\t * @param {number} position\n\t * @param {TSequencePart} last_piece\n\t */\n\tclone(position, last_piece){\n\t\tlet clone = new Sequence();\n\n\t\tlet parts = JSON.parse(JSON.stringify(this.parts));\n\t\tlet last_part = parts.pop();\n\t\tfor( const part of parts ){\n\t\t\tclone.add(part);\n\t\t}\n\n\t\tlet last_substr = last_piece.substr.substring(0,position-last_part.start);\n\t\tlet clone_last_len = last_substr.length;\n\t\tclone.add({start:last_part.start,end:last_part.start+clone_last_len,length:clone_last_len,substr:last_substr});\n\n\t\treturn clone;\n\t}\n\n}\n\n/**\n * Expand a regular expression pattern to include unicode variants\n * \teg /a/ becomes /aⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐɑAⒶＡÀÁÂẦẤẪẨÃĀĂẰẮẴẲȦǠÄǞẢÅǺǍȀȂẠẬẶḀĄȺⱯ/\n *\n * Issue:\n *  ﺊﺋ [ 'ﺊ = \\\\u{fe8a}', 'ﺋ = \\\\u{fe8b}' ]\n *\tbecomes:\tئئ [ 'ي = \\\\u{64a}', 'ٔ = \\\\u{654}', 'ي = \\\\u{64a}', 'ٔ = \\\\u{654}' ]\n *\n *\tİĲ = IIJ = ⅡJ\n *\n * \t1/2/4\n *\n * @param {string} str\n * @return {string|undefined}\n */\nexport const getPattern = (str) => {\n\tinitialize();\n\n\tstr\t\t\t\t\t= asciifold(str);\n\n\tlet pattern\t\t\t= '';\n\tlet sequences\t\t= [new Sequence()];\n\n\tfor( let i = 0; i < str.length; i++ ){\n\n\t\tlet substr\t= str.substring(i);\n\t\tlet match\t= substr.match(multi_char_reg);\n\t\tconst char\t= str.substring(i,i+1);\n\t\tconst match_str = match ? match[0] : null;\n\n\n\t\t// loop through sequences\n\t\t// add either the char or multi_match\n\t\tlet overlapping\t\t= [];\n\t\tlet added_types\t\t= new Set();\n\t\tfor(const sequence of sequences){\n\n\t\t\tconst last_piece\t= sequence.last();\n\n\n\t\t\tif( !last_piece || last_piece.length == 1 || last_piece.end <= i ){\n\n\t\t\t\t// if we have a multi match\n\t\t\t\tif( match_str ){\n\t\t\t\t\tconst len = match_str.length;\n\t\t\t\t\tsequence.add({start:i,end:i+len,length:len,substr:match_str});\n\t\t\t\t\tadded_types.add('1');\n\t\t\t\t}else{\n\t\t\t\t\tsequence.add({start:i,end:i+1,length:1,substr:char});\n\t\t\t\t\tadded_types.add('2');\n\t\t\t\t}\n\n\t\t\t}else if( match_str ){\n\n\t\t\t\tlet clone = sequence.clone(i,last_piece);\n\n\t\t\t\tconst len = match_str.length;\n\t\t\t\tclone.add({start:i,end:i+len,length:len,substr:match_str});\n\n\t\t\t\toverlapping.push(clone);\n\n\t\t\t}else{\n\t\t\t\t// don't add char\n\t\t\t\t// adding would create invalid patterns: 234 => [2,34,4]\n\t\t\t\tadded_types.add('3');\n\t\t\t}\n\n\t\t}\n\n\n\t\t// if we have overlapping\n\t\tif( overlapping.length > 0 ){\n\n\t\t\t// ['ii','iii'] before ['i','i','iii']\n\t\t\toverlapping = overlapping.sort((a,b)=>{\n\t\t\t\treturn a.length() - b.length();\n\t\t\t});\n\n\t\t\tfor( let clone of overlapping){\n\n\t\t\t\t// don't add if we already have an equivalent sequence\n\t\t\t\tif( inSequences(clone, sequences) ){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tsequences.push(clone);\n\t\t\t}\n\n\t\t\tcontinue;\n\t\t}\n\n\n\t\t// if we haven't done anything unique\n\t\t// clean up the patterns\n\t\t// helps keep patterns smaller\n\t\t// if str = 'r₨㎧aarss', pattern will be 446 instead of 655\n\t\tif( i > 0 && added_types.size == 1 && !added_types.has('3') ){\n\t\t\tpattern += sequencesToPattern(sequences,false);\n\t\t\tlet new_seq = new Sequence();\n\t\t\tconst old_seq = sequences[0];\n\t\t\tif( old_seq ){\n\t\t\t\tnew_seq.add(old_seq.last());\n\t\t\t}\n\t\t\tsequences = [new_seq];\n\t\t}\n\n\t}\n\n\tpattern += sequencesToPattern(sequences,true);\n\n\treturn pattern;\n}\n\n\nexport { escape_regex };\n"],"names":["arrayToPattern","chars","filter","Boolean","length","maxValueLength","join","sequencePattern","array","hasDuplicates","pattern","prev_char_count","prev_pattern","forEach","char","i","setToPattern","toArray","Set","size","escape_regex","str","replace","reduce","longest","value","Math","max","unicodeLength","p","Array","from","allSubstrings","input","result","start","substring","suba","subresult","tmp","slice","charAt","push","unshift","code_points","accent_pat","unicode_map","multi_char_reg","max_char_length","latin_convert","convert_pat","RegExp","Object","keys","initialize","_code_points","undefined","generateMap","normalize","form","decompose","match","asciifold","toLowerCase","generator","code_point_min","code_point_max","composed","String","fromCharCode","folded","decomposed","recomposed","code_point","generateSets","unicode_sets","addMatching","to_add","folded_set","patt","add","multi_char","set","sort","a","b","multi_char_patt","mapSequence","strings","min_replacement","chars_replaced","map","substringsToPattern","sub_pat","sequencesToPattern","sequences","all","sequence","seq","len","j","substrs","inSequences","needle_seq","end","needle_parts","parts","part","needle_part","substr","filtered","Sequence","constructor","min","last","clone","position","last_piece","JSON","parse","stringify","last_part","pop","last_substr","clone_last_len","getPattern","match_str","overlapping","added_types","has","new_seq","old_seq"],"mappings":"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"}